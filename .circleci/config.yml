version: 2.1

commands:
  destroy:
    description: Destroy all cloudformation stacks with a given workflow ID.
    steps:
      - run:
          name: Delete all files from the S3 bucket created
          command: |
            if aws s3api head-bucket --bucket udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7}
            then
              aws s3 rm s3://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            fi
          when: on_fail
      - run:
          name: Delete the AWS CloudFormation stacks
          command: |
            if aws cloudformation wait stack-exists --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}
            then 
              aws cloudformation delete-stack --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}
            fi
            if aws cloudformation wait stack-exists --stack-name udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}
            then
              aws cloudformation delete-stack --stack-name udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}
            fi
          when: on_fail

  revert-migration:
    description: Revert the latest migration
    steps:
      - run:
          name: Get the public DNS of EC2 instance from https://memstash.io/
          command: |
            PUBLIC_DNS=$(curl -H "token: prod-${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_DNS} >> ./inventory
            cat ./inventory
          when: on_fail
      - add_ssh_keys:
          fingerprints: ["74:e2:7a:4e:1a:2c:2f:79:ab:73:fd:7c:cb:a7:9d:a5"]
      - run:
          name: Revert the last migration
          command: |
            printenv >> ./backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory db_rollback.yml
          when: on_fail
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-v1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend-end
          command: |
            cd backend
            npm i
            npm run build
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-v1
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v1]      
      - run:
          name: front-end test
          command: |
            cd frontend
            npm i
            npm run test
            npm audit fix --audit-level=critical
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-build-v1]
      - run:
          name: back-end test
          command: |
            cd backend
            npm i
            npm run test
            npm audit fix --audit-level=critical
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v1]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical
            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-v1]
      - run:
          name: backend scan
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical
  
  deploy_infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Ensure back-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
                --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}
        
        - run:
            name: Get and save public DNS of EC2 instance to https://memstash.io/
            command: |
              PUBLIC_DNS=$(aws ec2 describe-instances --region us-east-1 --filters "Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[*].Instances[0].PublicDnsName" --output text)
              echo ${PUBLIC_DNS}
              curl -H "Content-Type: text/plain" \
                -H "token: prod-${CIRCLE_WORKFLOW_ID:0:7}" \
                --request PUT \
                --data ${PUBLIC_DNS} \
                https://api.memstash.io/values/public_dns
        
        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
                --stack-name "udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}"
        - destroy
        
 deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
            pip3 install awscli
      - run:
          name: Get the public DNS of EC2 instance from https://memstash.io/
          command: |
            PUBLIC_DNS=$(curl -H "token: prod-${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            cd .circleci/ansible/
            echo "[all]" > ./inventory
            echo ${PUBLIC_DNS} >> ./inventory
            cat ./inventory
      - add_ssh_keys:
          fingerprints: ["74:e2:7a:4e:1a:2c:2f:79:ab:73:fd:7c:cb:a7:9d:a5"]  
      - run:
          name: Configure server
          command: |
            printenv > ./backend/.env
            cd .circleci/ansible/
            ansible-playbook -i ./inventory deploy-backend.yml
      - revert-migration
      - destroy

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install system dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update npm
            pip3 install awscli
      - run:
          name: Build the frontend
          command: |
            PUBLIC_DNS=$(curl -H "token: prod-${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/public_dns)
            echo ${PUBLIC_DNS}
            export API_URL="http://${PUBLIC_DNS}:3030"
            echo API_URL=${API_URL}
            cd frontend
            npm install
            npm run build
      - run: 
          name: Copy built frontend files to the S3 bucket
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-prod-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy_infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: main    
      - deploy-backend:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: main
      - deploy-frontend:
          requires: [deploy-backend]
          filters:
            branches:
              only: main       
