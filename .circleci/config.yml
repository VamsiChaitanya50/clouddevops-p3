version: 2.1

commands:
  destroy_environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-backend-prod-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-prod-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-prod-<<parameters.workflow_id>>
          
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-v1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build backend-end
          command: |
            cd backend
            npm i
            npm run build
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-v1
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v1]      
      - run:
          name: front-end test
          command: |
            cd frontend
            npm i
            npm run test
            npm audit fix --audit-level=critical
            
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
           keys: [backend-build-v1]
      - run:
          name: back-end test
          command: |
            cd backend
            npm i
            npm run test
            npm audit fix --audit-level=critical
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-v1]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical
            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-v1]
      - run:
          name: backend scan
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical
  
  deploy_infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Ensure back-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
                --stack-name udapeople-backend-prod-${CIRCLE_WORKFLOW_ID:0:7}
        
        - run:
          name: Get and save public DNS of EC2 instance to https://memstash.io/
          command: |
            PUBLIC_DNS=$(aws ec2 describe-instances --region us-east-1 --filters 'Name=tag:Name,Values=backend-prod-${CIRCLE_WORKFLOW_ID:0:7}' --query "Reservations[*].Instances[0].PublicDnsName" --output text)
            echo ${PUBLIC_DNS}
            curl -H "Content-Type: text/plain" \
               -H "token: prod-${CIRCLE_WORKFLOW_ID:0:7}" \
               --request PUT \
               --data ${PUBLIC_DNS} \
               https://api.memstash.io/values/public_dns
        
        - run: yum -y install tar gzip
        - persist_to_workspace:
            root: ~/
            paths:
              - project/.circleci/outputs/backend_url.txt
              - project/.circleci/ansible/inventory.txt

        - run:
            name: Ensure front-end infrastructure exist
            command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --parameter-overrides ID="prod-${CIRCLE_WORKFLOW_ID:0:7}" \
                --stack-name "udapeople-frontend-prod-${CIRCLE_WORKFLOW_ID:0:7}"
                
        - destroy        
   
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy_backend_infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: main    
